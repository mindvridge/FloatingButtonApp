package com.mv.floatingbuttonapp

import android.content.Intent
import android.graphics.Rect
import android.os.Bundle
import android.view.View
import android.view.ViewTreeObserver
import android.view.WindowManager
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.animation.*
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.spring
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.selection.selectable
import androidx.compose.foundation.selection.toggleable
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalClipboardManager
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.platform.LocalView
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

class OcrBottomSheetActivity : ComponentActivity() {

    companion object {
        const val EXTRA_OCR_TEXT = "ocr_text"
        const val EXTRA_SUGGESTIONS = "suggestions"
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // ÌÇ§Î≥¥ÎìúÏôÄ Ìï®Íªò Î†àÏù¥ÏïÑÏõÉ Ï°∞Ï†ï
        WindowCompat.setDecorFitsSystemWindows(window, false)

        val ocrText = intent.getStringExtra(EXTRA_OCR_TEXT) ?: ""
        val suggestions = intent.getStringArrayListExtra(EXTRA_SUGGESTIONS) ?: arrayListOf()

        setContent {
            MaterialTheme {
                OcrBottomSheetContent(
                    initialText = ocrText,
                    suggestions = suggestions,
                    onDismiss = { finish() },
                    onRetry = {
                        val intent = Intent("com.mv.floatingbuttonapp.RETRY_OCR")
                        sendBroadcast(intent)
                        finish()
                    }
                )
            }
        }
    }

    override fun onBackPressed() {
        super.onBackPressed()
        overridePendingTransition(0, android.R.anim.slide_out_right)
    }
}

// WindowCompat ÌÅ¥ÎûòÏä§ (androidx.core.view.WindowCompatÏù¥ ÏóÜÎäî Í≤ΩÏö∞)
object WindowCompat {
    fun setDecorFitsSystemWindows(window: android.view.Window, decorFitsSystemWindows: Boolean) {
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.R) {
            window.setDecorFitsSystemWindows(decorFitsSystemWindows)
        } else {
            val decorView = window.decorView
            val sysUiVis = decorView.systemUiVisibility
            decorView.systemUiVisibility = if (decorFitsSystemWindows) {
                sysUiVis and View.SYSTEM_UI_FLAG_LAYOUT_STABLE.inv() and View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN.inv()
            } else {
                sysUiVis or View.SYSTEM_UI_FLAG_LAYOUT_STABLE or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
            }
        }
    }
}

// ÌÇ§Î≥¥Îìú ÎÜíÏù¥Î•º Ï†ïÌôïÌïòÍ≤å Í∞êÏßÄÌïòÎäî Composable
@Composable
fun rememberImeState(): State<Boolean> {
    val imeState = remember { mutableStateOf(false) }
    val view = LocalView.current

    DisposableEffect(view) {
        val listener = ViewTreeObserver.OnGlobalLayoutListener {
            val isKeyboardOpen = ViewCompat.getRootWindowInsets(view)
                ?.isVisible(WindowInsetsCompat.Type.ime()) ?: false
            imeState.value = isKeyboardOpen
        }

        view.viewTreeObserver.addOnGlobalLayoutListener(listener)
        onDispose {
            view.viewTreeObserver.removeOnGlobalLayoutListener(listener)
        }
    }

    return imeState
}

// ÎãµÎ≥Ä Ïπ¥ÌÖåÍ≥†Î¶¨ Îç∞Ïù¥ÌÑ∞
data class ResponseCategory(
    val id: String,
    val name: String,
    val selected: Boolean = false
)

data class ResponseSubCategory(
    val id: String,
    val name: String,
    val selected: Boolean = false
)

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun OcrBottomSheetContent(
    initialText: String,
    suggestions: List<String>,
    onDismiss: () -> Unit,
    onRetry: () -> Unit
) {
    var ocrText by remember { mutableStateOf(initialText) }
    var showCopiedMessage by remember { mutableStateOf(false) }
    var isEditMode by remember { mutableStateOf(false) }
    var showResponseOptions by remember { mutableStateOf(false) }
    var generatedResponses by remember { mutableStateOf<List<String>>(emptyList()) }

    val clipboardManager = LocalClipboardManager.current
    val scope = rememberCoroutineScope()

    // ÌÇ§Î≥¥Îìú ÏÉÅÌÉú Í∞êÏßÄ
    val isKeyboardOpen by rememberImeState()

    // ÎåÄÏÉÅÏûê (Îã®Ïùº ÏÑ†ÌÉù Ïú†ÏßÄ)
    var selectedSituation by remember { mutableStateOf("Ïç∏") }
    val situations = listOf("Ïç∏", "Ïó∞Ïù∏")

    // ‚úÖ ÎãµÎ≥Ä Î™®Îìú (Îã®Ïùº ÏÑ†ÌÉùÏúºÎ°ú Î≥ÄÍ≤Ω)
    var selectedMood by remember { mutableStateOf("ÏßàÎ¨∏Ìòï") }
    val moods = listOf("ÏßàÎ¨∏Ìòï", "Í≥µÍ∞êÌòï", "Ìò∏ÏùëÌòï")

    // ‚úÖ ÎãµÎ≥Ä Í∏∏Ïù¥ (Îã®Ïùº ÏÑ†ÌÉùÏúºÎ°ú Î≥ÄÍ≤Ω)
    var selectedLength by remember { mutableStateOf("ÏßßÍ≤å") }
    val lengths = listOf("ÏßßÍ≤å", "Ï§ëÍ∞Ñ", "Í∏∏Í≤å")

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Black.copy(alpha = 0.5f))
            .clickable { if (!isEditMode && !showResponseOptions) onDismiss() }
    ) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .wrapContentHeight()
                .align(Alignment.BottomCenter)        // üîß Ìï≠ÏÉÅ ÌïòÎã® Ï†ïÎ†¨ Ïú†ÏßÄ
                .navigationBarsPadding()
                .imePadding()                         // üîß ÌÇ§Î≥¥Îìú ÎÜíÏù¥ÎßåÌÅº ÌïòÎã® Ìå®Îî© Î∂ÄÏó¨
                .animateContentSize(),
            shape = RoundedCornerShape(topStart = 20.dp, topEnd = 20.dp),
            colors = CardDefaults.cardColors(containerColor = Color.White)
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(20.dp)
                    .verticalScroll(rememberScrollState())
            ) {
                // Ìó§Îçî
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(bottom = 16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = if (showResponseOptions) "ÎãµÎ≥Ä Ï∂îÏ≤ú" else "ÎåÄÌôî Îì±Î°ù",
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold
                    )
                    IconButton(onClick = {
                        if (showResponseOptions) {
                            showResponseOptions = false
                            generatedResponses = emptyList()
                        } else onDismiss()
                    }) {
                        Icon(
                            if (showResponseOptions) Icons.Default.ArrowBack else Icons.Default.Close,
                            contentDescription = "Îã´Í∏∞",
                            tint = Color.Gray
                        )
                    }
                }

                // ÎãµÎ≥Ä Ï∂îÏ≤ú ÌôîÎ©¥
                if (showResponseOptions) {
                    Column(modifier = Modifier.fillMaxWidth()) {

                        // ÏÉùÏÑ±Îêú ÎãµÎ≥Ä Î™©Î°ù
                        if (generatedResponses.isNotEmpty()) {
                            Text(
                                text = "Ï∂îÏ≤ú ÎãµÎ≥Ä",
                                fontSize = 14.sp,
                                fontWeight = FontWeight.Medium,
                                modifier = Modifier.padding(bottom = 12.dp)
                            )
                            generatedResponses.forEach { response ->
                                Card(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .padding(bottom = 8.dp)
                                        .clickable {
                                            clipboardManager.setText(AnnotatedString(response))
                                            scope.launch {
                                                showCopiedMessage = true
                                                delay(2000)
                                                showCopiedMessage = false
                                            }
                                        },
                                    colors = CardDefaults.cardColors(containerColor = Color(0xFFF5F5F5))
                                ) {
                                    Row(
                                        modifier = Modifier
                                            .fillMaxWidth()
                                            .padding(12.dp),
                                        horizontalArrangement = Arrangement.SpaceBetween,
                                        verticalAlignment = Alignment.CenterVertically
                                    ) {
                                        Text(
                                            text = response,
                                            fontSize = 14.sp,
                                            modifier = Modifier.weight(1f)
                                        )
                                        Icon(
                                            Icons.Default.ContentCopy,
                                            contentDescription = "Î≥µÏÇ¨",
                                            tint = Color.Gray,
                                            modifier = Modifier.size(18.dp)
                                        )
                                    }
                                }
                            }
                            Spacer(modifier = Modifier.height(16.dp))
                        }

                        // ÏòµÏÖò ÌÉÄÏù¥ÌãÄ
                        Text(
                            text = "ÎãµÎ≥Ä Ï∂îÏ≤ú :",
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Medium,
                            modifier = Modifier.padding(bottom = 12.dp)
                        )

                        // ÎåÄÏÉÅÏûê (Îã®Ïùº ÏÑ†ÌÉù)
                        Text("ÎåÄÏÉÅÏûê", fontSize = 12.sp, color = Color.Gray, modifier = Modifier.padding(bottom = 8.dp))
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(bottom = 16.dp),
                            horizontalArrangement = Arrangement.spacedBy(8.dp)
                        ) {
                            situations.forEach { situation ->
                                FilterChip(
                                    selected = selectedSituation == situation,
                                    onClick = { selectedSituation = situation },
                                    label = { Text(situation) },
                                    modifier = Modifier.weight(1f)
                                )
                            }
                        }

                        // ‚úÖ ÎãµÎ≥Ä Î™®Îìú (Îã®Ïùº ÏÑ†ÌÉù)
                        Text("ÎãµÎ≥Ä Î™®Îìú", fontSize = 12.sp, color = Color.Gray, modifier = Modifier.padding(bottom = 8.dp))
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(bottom = 16.dp),
                            horizontalArrangement = Arrangement.spacedBy(8.dp)
                        ) {
                            moods.forEach { mood ->
                                FilterChip(
                                    selected = selectedMood == mood,
                                    onClick = { selectedMood = mood },
                                    label = { Text(mood) }
                                )
                            }
                        }

                        // ‚úÖ ÎãµÎ≥Ä Í∏∏Ïù¥ (Îã®Ïùº ÏÑ†ÌÉù)
                        Text("ÎãµÎ≥Ä Í∏∏Ïù¥", fontSize = 12.sp, color = Color.Gray, modifier = Modifier.padding(bottom = 8.dp))
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(bottom = 16.dp),
                            horizontalArrangement = Arrangement.spacedBy(8.dp)
                        ) {
                            lengths.forEach { length ->
                                FilterChip(
                                    selected = selectedLength == length,
                                    onClick = { selectedLength = length },
                                    label = { Text(length) }
                                )
                            }
                        }

                        // ÌòÑÏû¨ ÏÑ§Ï†ï ÌëúÏãú
                        Card(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 8.dp),
                            colors = CardDefaults.cardColors(containerColor = Color(0xFFE8F4FF))
                        ) {
                            Text(
                                text = "ÌòÑÏû¨ ÏÑ§Ï†ï : [$selectedSituation] [$selectedMood] [$selectedLength]",
                                fontSize = 12.sp,
                                color = Color(0xFF0066CC),
                                modifier = Modifier.padding(12.dp)
                            )
                        }

                        // ÏÉùÏÑ± Î≤ÑÌäº (ÌïÑÎìú ÌòïÌÉúÎäî Ïú†ÏßÄ)
                        OutlinedTextField(
                            value = "Ï∂îÏ≤ú ÎãµÎ≥Ä",
                            onValueChange = {},
                            enabled = false,
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 8.dp),
                            trailingIcon = {
                                IconButton(onClick = {
                                    generatedResponses = generateResponses(
                                        context = ocrText,
                                        situation = selectedSituation,
                                        mood = selectedMood,
                                        length = selectedLength
                                    )
                                }) {
                                    Icon(
                                        Icons.Default.Send,
                                        contentDescription = "ÏÉùÏÑ±",
                                        tint = Color(0xFF0066CC)
                                    )
                                }
                            }
                        )
                    }
                } else {
                    // Í∏∞Ï°¥ OCR Í∏∞Î≥∏ ÌôîÎ©¥ (Î≥ÄÍ≤Ω ÏóÜÏùå)
                    Text(
                        text = "ÎåÄÌôî ÎÇ¥Ïö©Ïù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.",
                        fontSize = 14.sp,
                        color = Color.Gray,
                        modifier = Modifier.padding(bottom = 16.dp)
                    )
                    Text(
                        text = "OCR Ïù∏Ïãù Í≤∞Í≥º :",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium,
                        modifier = Modifier.padding(bottom = 8.dp)
                    )
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(if (isKeyboardOpen) 120.dp else 200.dp),
                        shape = RoundedCornerShape(12.dp),
                        colors = CardDefaults.cardColors(containerColor = Color(0xFFF5F5F5))
                    ) {
                        Box(
                            modifier = Modifier
                                .fillMaxSize()
                                .padding(12.dp)
                        ) {
                            if (suggestions.isNotEmpty() && !isEditMode) {
                                Column(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .verticalScroll(rememberScrollState())
                                ) {
                                    suggestions.forEach { suggestion ->
                                        Text(
                                            text = suggestion,
                                            fontSize = 14.sp,
                                            color = Color(0xFF666666),
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .clickable {
                                                    ocrText = suggestion
                                                    isEditMode = true
                                                }
                                                .padding(vertical = 4.dp)
                                        )
                                    }
                                }
                            } else {
                                OutlinedTextField(
                                    value = ocrText,
                                    onValueChange = {
                                        ocrText = it
                                        isEditMode = true
                                    },
                                    modifier = Modifier.fillMaxWidth(),
                                    colors = TextFieldDefaults.colors(
                                        focusedContainerColor = Color.Transparent,
                                        unfocusedContainerColor = Color.Transparent,
                                        focusedIndicatorColor = Color.Transparent,
                                        unfocusedIndicatorColor = Color.Transparent
                                    ),
                                    textStyle = LocalTextStyle.current.copy(
                                        fontSize = 14.sp,
                                        color = Color(0xFF333333)
                                    )
                                )
                            }
                        }
                    }

                    if (!isKeyboardOpen) {
                        // ÏïàÎÇ¥ Î∞è Î≤ÑÌäºÎì§ (Í∏∞Ï°¥ Í∑∏ÎåÄÎ°ú)
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 8.dp),
                            horizontalArrangement = Arrangement.Center
                        ) {
                            Icon(
                                imageVector = Icons.Default.Refresh,
                                contentDescription = null,
                                modifier = Modifier.size(16.dp),
                                tint = Color(0xFF666666)
                            )
                            Spacer(modifier = Modifier.width(4.dp))
                            Text(
                                text = "Ïù∏ÏãùÎêú ÌÖçÏä§Ìä∏Í∞Ä Ï†ïÌôïÌïòÏßÄ ÏïäÎã§Î©¥ ÏßÅÏ†ë ÏàòÏ†ïÌï† Ïàò ÏûàÏäµÎãàÎã§.",
                                fontSize = 12.sp,
                                color = Color(0xFF666666)
                            )
                        }

                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(top = 16.dp),
                            horizontalArrangement = Arrangement.spacedBy(12.dp)
                        ) {
                            Button(
                                onClick = onRetry,
                                modifier = Modifier.weight(1f),
                                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFE0E0E0)),
                                shape = RoundedCornerShape(8.dp)
                            ) { Text("Îã§Ïãú Ïù∏ÏãùÌïòÍ∏∞", color = Color(0xFF666666)) }

                            Button(
                                onClick = { isEditMode = true },
                                modifier = Modifier.weight(1f),
                                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFE0E0E0)),
                                shape = RoundedCornerShape(8.dp)
                            ) { Text("ÏßÅÏ†ë ÏàòÏ†ïÌïòÍ∏∞", color = Color(0xFF666666)) }
                        }

                       /* TextButton(
                            onClick = {  ÏòµÏÖò ÏÑ†ÌÉù  },
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(top = 8.dp)
                        ) {
                            Text(text = "ÏòµÏÖòÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî", color = Color(0xFF4A90E2), fontSize = 14.sp)
                        }*/

                        Text(text = "ÏòµÏÖòÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî", color = Color(0xFF4A90E2), fontSize = 14.sp)

                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(top = 16.dp),
                            horizontalArrangement = Arrangement.spacedBy(12.dp)
                        ) {
                            OutlinedButton(
                                onClick = onRetry,
                                modifier = Modifier.weight(1f),
                                shape = RoundedCornerShape(24.dp)
                            ) {
                                Icon(Icons.Default.Refresh, contentDescription = null, modifier = Modifier.size(18.dp))
                                Spacer(modifier = Modifier.width(4.dp))
                                Text("Îã§Ïãú ÏÑ†ÌÉù")
                            }

                            Button(
                                onClick = { showResponseOptions = true },
                                modifier = Modifier.weight(1f),
                                shape = RoundedCornerShape(24.dp)
                            ) {
                                Icon(Icons.Default.AutoAwesome, contentDescription = null, modifier = Modifier.size(18.dp))
                                Spacer(modifier = Modifier.width(4.dp))
                                Text("ÎãµÎ≥Ä Ï∂îÏ≤ú")
                            }
                        }
                    }
                }

                if (showCopiedMessage) {
                    Snackbar(
                        modifier = Modifier.padding(top = 8.dp),
                        action = { TextButton(onClick = { showCopiedMessage = false }) { Text("ÌôïÏù∏") } }
                    ) { Text("ÌÖçÏä§Ìä∏Í∞Ä Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§") }
                }
            }
        }
    }
}


// ÎãµÎ≥Ä ÏÉùÏÑ± Ìï®Ïàò
// ÎãµÎ≥Ä ÏÉùÏÑ± Ìï®Ïàò (Îã®Ïùº ÏÑ†ÌÉù Î™®ÎìúÏóê ÎßûÍ≤å ÏàòÏ†ï)
fun generateResponses(
    context: String,
    situation: String,
    mood: String,
    length: String
): List<String> {
    return when {
        context.contains("ÎÇ¥Ïùº ÏïΩÏÜç") || context.contains("ÎÇ¥Ïùº Î≠£Ïãú") -> {
            when {
                mood == "ÏßàÎ¨∏Ìòï" -> listOf(
                    "Ïò§ Ï¢ãÏßÄ! !! ÎÇ¥Ïùº Î≠£ÏãúÏóê ÎßåÎÇ†Îûò?",
                    "Ìûò ÏïÑÏù¥ÏóëÏä§ÎùºÎÇò ÎåÄÎ∞ï....! Ïù¥ÎîîÎ°ú Í∞àÍπå??",
                    "ÎÑò Ï¢ãÏïÑ „Öé„Öé ÎÇò Ïä§ÌååÏù¥ÎçîÎß® ÏßÑÏßú Ï¢ãÏïÑÌï¥!! üòä"
                )
                mood == "Í≥µÍ∞êÌòï" -> listOf(
                    "ÏôÄ ÏßÑÏßú Ïû¨Î∞åÍ≤†Îã§! ÎÇòÎèÑ Î≥¥Í≥† Ïã∂ÏóàÏñ¥",
                    "Ïò§ ÎåÄÎ∞ï! Ïä§ÌååÏù¥ÎçîÎß® ÏôÑÏ†Ñ Í∏∞ÎåÄÎèº",
                    "Ï¢ãÏïÑÏ¢ãÏïÑ! ÏòÅÌôî Î≥∏ÏßÄ Ïò§ÎûòÎêêÎäîÎç∞ Îî±Ïù¥Îã§"
                )
                else -> listOf(
                    "Ï¢ãÏïÑ! Î™á ÏãúÏóê Î≥ºÍπå?",
                    "Ïò§ÏºÄÏù¥! Ïñ¥ÎîîÏÑú Î≥ºÍπå?",
                    "ÏùëÏùë Í∞ÄÏûê!"
                )
            }
        }
        context.contains("ÏòÅÌôî") -> {
            listOf(
                "Ïò§ Ï¢ãÏßÄ! !! ÎÇ¥Ïùº Î≠£ÏãúÏóê ÎßåÎÇ†Îûò?",
                "Ìûò ÏïÑÏù¥ÏóëÏä§ÎùºÎÇò ÎåÄÎ∞ï....! Ïù¥ÎîîÎ°ú Í∞àÍπå??",
                "ÎÑò Ï¢ãÏïÑ „Öé„Öé ÎÇò Ïä§ÌååÏù¥ÎçîÎß® ÏßÑÏßú Ï¢ãÏïÑÌï¥!! üòä"
            )
        }
        else -> {
            listOf("Ïùë Ï¢ãÏïÑ!", "Ïò§ Í¥úÏ∞ÆÎÑ§~", "„Öá„Öã„Öá„Öã Í∞ÄÏûê!")
        }
    }
}